# -*- coding: utf-8 -*-
"""Diabetes Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12SaRz61u_zNK3dWjclOVSA-MgnkjbWyV

Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data collection and analysis"""

# loading the dataset to a pandas dataframe
diabetes_data = pd.read_csv('/content/diabetes.csv')

diabetes_data.head()

#  no of rows and columns in data frame
diabetes_data.shape

# statistical measue of the data
diabetes_data.describe()

diabetes_data['Outcome'].value_counts()

"""0 --> Non diabetic

1 --> Diabetic
"""

diabetes_data.groupby('Outcome').mean()

# seprating the data and labels
X = diabetes_data.drop(columns = 'Outcome',axis = 1)
Y = diabetes_data['Outcome']

print(X)
print(Y)

"""Data Standardization

"""

scaler = StandardScaler()

scaler.fit(X)

standarized_data = scaler.transform(X)

print(standarized_data)

X =standarized_data
Y = diabetes_data['Outcome']

"""Trainig and test data

"""

X_train,X_test,Y_train,Y_test= train_test_split(X,Y, test_size = 0.2, stratify =Y , random_state = 2 )

"""Training the model"""

classifier = svm.SVC(kernel='linear')

# training the support vector machine classifier
classifier.fit(X_train,Y_train)

"""Evaluting our model

Accuracy score
"""

# accuracy score on training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print(f'Acurracy score of training data : {training_data_accuracy}')

# accuracy score on test data
X_test_prediction = classifier.predict(X_test)
test_data_prediction  = accuracy_score(X_test_prediction,Y_test)

print(f"Accuracy of test data : {test_data_prediction}")

"""Making a prediction system"""

input_data =(2,197,70,45,543,30.5,0.158,53)

#  changing input_data into numpy array

input_data_as_numpy_array = np.asarray(input_data)

# reshape the array(as we only predecting for one instance and if we dont reshape it model will consider for 768 instances)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the input data
std_data = scaler.transform(input_data_reshaped)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print('The person is non diabetic')
else:
  print('The person is diabetic')

